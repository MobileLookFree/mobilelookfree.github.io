{"version":3,"sources":["components/ui/Link.tsx","components/service/App.tsx","hooks/useTheme.ts","hooks/useToggle.ts","index.tsx"],"names":["Colors","StyledLink","styled","a","color","Link","props","children","others","defaultProps","PureComponent","App","defTheme","useState","theme","setTheme","onThemeEvent","event","matches","useEffect","tmq","window","matchMedia","addEventListener","useTheme","first","second","value","setValue","useToggle","toggleValue","console","log","style","background","onClick","href","ReactDOM","render","document","getElementById"],"mappings":"0bAIA,IASYA,EATNC,E,KAAaC,EAAOC,EAAV,KAEL,qBAAGC,SAoBd,SAASC,EAAQC,GAAsB,IAC7BC,EAAuBD,EAAvBC,SAAaC,EADe,YACLF,EADK,cAEpC,OACE,kBAACL,EAAeO,EACbD,I,SAjBKP,K,UAAAA,E,aAAAA,M,KAsBZK,EAAKI,aAAe,CAClBL,MAAO,QAOiBM,gBAAnB,IAWQL,IC/BAM,EAlBC,WAAO,IAAD,ECHE,WAA2C,IAA1CC,EAAyC,uDAAZ,QAAY,EACtCC,mBAA2BD,GADW,mBACzDE,EADyD,KAClDC,EADkD,KAG1DC,EAAe,SAACC,GAAD,OACnBF,EAASE,EAAMC,QAAU,OAAS,UAOpC,OALAC,qBAAU,WACR,IAAMC,EAAMC,OAAOC,WAAW,gCAC9BF,GAAOA,EAAIG,iBAAiB,SAAUP,KACrC,CAACD,IAEG,CAACD,EAAOC,GDPCS,GAATV,EADa,sBEHf,SAAgCW,EAAUC,GAAY,IAAD,EAChCb,mBAAYY,GADoB,mBACnDE,EADmD,KAC5CC,EAD4C,KAQ1D,MAAO,CAACD,EALS,kBAAMC,EAASD,IAAUF,EACtCC,EACAD,IAGqBG,GFHIC,EAAmB,GAAM,GAFlC,mBAEbF,EAFa,KAENG,EAFM,KAMpB,OAFAC,QAAQC,IAAIL,GAGV,yBACEM,MAAO,CAAEC,WAAsB,SAAVpB,EAAmB,QAAU,SAClDqB,QAASL,GAET,kBAAC,EAAD,CAAMM,KAAK,qBAAX,8BGZNC,IAASC,OACP,kBAAC,aAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.ba367fe5.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport styled from 'styled-components';\n\n// styles\nconst StyledLink = styled.a`\n  text-decoration: none;\n  color: ${({ color }) => color};\n  font-weight: bold;\n  &:hover {\n    color: red\n  }\n`;\n\nexport enum Colors {\n  red = 'red',\n  blue = 'blue'\n};\n\ninterface LinkProps<T> {\n  children?: React.ReactNode;\n  color?: Colors;\n  width?: T;\n  height?: T;\n  href: string;\n}\n\nfunction Link<T>(props: LinkProps<T>) {\n  const { children, ...others} = props;\n  return (\n    <StyledLink {...others}>\n      {children}\n    </StyledLink>\n  );\n};\n\nLink.defaultProps = {\n  color: 'blue',\n};\n\ninterface IClass {\n  child: React.ReactChild;\n}\n\nexport class Test extends PureComponent<IClass>{\n  getNumber = (num: number): 1 | 0 => {\n    return num > 2 ? 1 : 0;\n  }\n\n  render(): React.ReactNode {\n    const { child } = this.props;\n      return child;\n  }\n};\n\nexport default Link;","import React, { FC } from 'react';\nimport { useTheme } from '../../hooks/useTheme';\nimport { useToggle } from '../../hooks/useToggle';\nimport Link from '../ui/Link';\n\nconst App: FC = () => {\n  const [theme] = useTheme();\n  const [value, toggleValue] = useToggle<boolean>(true, false);\n\n  console.log(value);\n\n  return (\n    <div\n      style={{ background: theme === 'dark' ? 'black' : 'white' }}\n      onClick={toggleValue}\n    >\n      <Link href='https://yandex.ru'>\n        Клик\n      </Link>\n    </div>\n  );\n};\n\nexport default App;","import { useState, useEffect } from 'react'\n\nexport const useTheme = (defTheme: 'light' | 'dark' = 'light') => {\n  const [theme, setTheme] = useState<'light' | 'dark'>(defTheme);\n\n  const onThemeEvent = (event: MediaQueryListEvent) =>\n    setTheme(event.matches ? 'dark' : 'light');\n\n  useEffect(() => {\n    const tmq = window.matchMedia('(prefers-color-scheme: dark)');\n    tmq && tmq.addEventListener('change', onThemeEvent);\n  }, [setTheme]);\n\n  return [theme, setTheme] as const;\n};","import { useState } from 'react';\n\nexport function useToggle<T = boolean>(first: T, second: T) {\n  const [value, setValue] = useState<T>(first);\n\n  const onToggle = () => setValue(value === first\n    ? second\n    : first\n  );\n\n  return [value, onToggle, setValue] as const;\n};","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/service/App';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}